{"version":3,"file":"sidepanel.js","mappings":"mBACA,MAAMA,EAAUC,SAASC,eAAe,SAClCC,EAASF,SAASC,eAAe,UACjCE,EAAcH,SAASC,eAAe,eAS5CG,eAAeC,IACb,IACE,MAAMC,QAAiBC,OAAOC,QAAQC,YAAoC,CACxEC,KAAM,wBAGFC,GAAUL,aAAQ,EAARA,EAAUK,UAAW,EAErC,GAAIA,GAAW,EAGb,OAFAZ,EAAQa,YAAc,gBACtBb,EAAQc,MAAMC,MAAQ,WAIxB,MAAMC,EAAOC,KAAKC,MAAMN,EAAU,IAC5BO,EAAOF,KAAKC,MAAMN,EAAU,IAClCZ,EAAQa,YAAc,GAAGG,KAAQG,EAAKC,WAAWC,SAAS,EAAG,OAGzDT,EAAU,MACZZ,EAAQc,MAAMC,MAAQ,U,CAExB,MAAOO,GACPC,QAAQD,MAAM,4BAA6BA,GAC3CtB,EAAQa,YAAc,QACtBb,EAAQc,MAAMC,MAAQ,S,CAE1B,CAkCAV,eAAemB,IACb,IACE,MAAMC,EAAgBC,QAAQ,yCAC9B,IAAIC,EAAgB,GAEpB,GAAIF,IACFE,EAAgBC,OAAO,wBAAyB,cAAa,IAAIC,MAAOC,yBAA2B,IAC9FH,GAAe,aAGhBnB,OAAOC,QAAQC,YAAY,CAC/BC,KAAM,oBACNoB,QAAS,CACPN,gBACAE,mBAIJ3B,EAAQa,YAAc,QACtBb,EAAQc,MAAMC,MAAQ,UACtBZ,EAAO6B,UAAW,EAClB7B,EAAOU,YAAc,e,CACrB,MAAOS,GACPC,QAAQD,MAAM,wBAAyBA,GACvCW,MAAM,0C,CAEV,CAoBAhC,SAASiC,iBAAiB,oBAf1B,WAEE/B,SAAAA,EAAQ+B,iBAAiB,QAASV,GA9DpCnB,iBACE,IACE,MAAM,kBAAE8B,SAA4B3B,OAAO4B,QAAQC,MAAMC,IAAI,qBAE7D,IAAKlC,EAAa,OAEd+B,GAAqBA,EAAkBI,OAAS,GAClDnC,EAAYoC,UAAY,GAExBL,EAAkBM,SAASC,IACzB,MAAMC,EAAM1C,SAAS2C,cAAc,OACnCD,EAAIE,UAAY,uBAChBF,EAAI9B,YAAc6B,EAClBtC,EAAY0C,YAAYH,EAAI,KAG9BvC,EAAYoC,UAAY,uD,CAE1B,MAAOlB,GACPC,QAAQD,MAAM,oCAAqCA,GAC/ClB,IACFA,EAAYoC,UAAY,2D,CAG9B,CAyCEO,GAAwBC,MAAMzB,QAAQD,OACtChB,IAAc0C,MAAMzB,QAAQD,OAG5B2B,aAAY,KACV3C,IAAc0C,MAAMzB,QAAQD,MAAM,GACjC,IACL,G","sources":["webpack://context-focus/./src/sidepanel/index.ts"],"sourcesContent":["// DOM element references\nconst timerEl = document.getElementById(\"timer\") as HTMLElement;\nconst endBtn = document.getElementById(\"endBtn\") as HTMLButtonElement;\nconst blockedList = document.getElementById(\"blockedList\") as HTMLElement;\n\ninterface FocusTimeResponse {\n  seconds: number;\n}\n\n/**\n * Update timer display every second\n */\nasync function updateTimer(): Promise<void> {\n  try {\n    const response = await chrome.runtime.sendMessage<any, FocusTimeResponse>({ \n      type: \"GET_FOCUS_TIME_LEFT\" \n    });\n    \n    const seconds = response?.seconds || 0;\n    \n    if (seconds <= 0) {\n      timerEl.textContent = \"COMPLETE\";\n      timerEl.style.color = \"#4caf50\"; // Green\n      return;\n    }\n    \n    const mins = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    timerEl.textContent = `${mins}:${secs.toString().padStart(2, '0')}`;\n    \n    // Visual warning when time is low\n    if (seconds < 300) { // Less than 5 minutes (300 seconds)\n      timerEl.style.color = \"#ff9800\"; // Orange\n    }\n  } catch (error) {\n    console.error(\"Error fetching time left:\", error);\n    timerEl.textContent = \"ERROR\";\n    timerEl.style.color = \"#f44336\"; // Red\n  }\n}\n\n/**\n * Load blocked categories from storage\n */\nasync function loadBlockedCategories(): Promise<void> {\n  try {\n    const { blockedCategories } = await chrome.storage.local.get(\"blockedCategories\");\n    \n    if (!blockedList) return;\n    \n    if (blockedCategories && blockedCategories.length > 0) {\n      blockedList.innerHTML = '';\n      \n      blockedCategories.forEach((category: string) => {\n        const div = document.createElement('div');\n        div.className = 'context-item blocked';\n        div.textContent = category;\n        blockedList.appendChild(div);\n      });\n    } else {\n      blockedList.innerHTML = '<div class=\"context-item\">No categories blocked</div>';\n    }\n  } catch (error) {\n    console.error(\"Error loading blocked categories:\", error);\n    if (blockedList) {\n      blockedList.innerHTML = '<div class=\"context-item\">Error loading categories</div>';\n    }\n  }\n}\n\n/**\n * Handle ending the focus session\n */\nasync function handleEndSession(): Promise<void> {\n  try {\n    const saveWorkspace = confirm(\"Save current workspace before ending?\");\n    let workspaceName = '';\n    \n    if (saveWorkspace) {\n      workspaceName = prompt(\"Enter workspace name:\", `Workspace_${new Date().toLocaleDateString()}`) || '';\n      if (!workspaceName) return; // User cancelled\n    }\n    \n    await chrome.runtime.sendMessage({\n      type: \"END_FOCUS_SESSION\",\n      payload: {\n        saveWorkspace,\n        workspaceName\n      }\n    });\n    \n    timerEl.textContent = \"ENDED\";\n    timerEl.style.color = \"#f44336\"; // Red\n    endBtn.disabled = true;\n    endBtn.textContent = \"Session Ended\";\n  } catch (error) {\n    console.error(\"Error ending session:\", error);\n    alert(\"Error ending session. Please try again.\");\n  }\n}\n\n/**\n * Initialize the sidepanel\n */\nfunction initialize(): void {\n  // Add event listener to end button\n  endBtn?.addEventListener(\"click\", handleEndSession);\n  \n  // Load initial data\n  loadBlockedCategories().catch(console.error);\n  updateTimer().catch(console.error);\n  \n  // Set up timer interval\n  setInterval(() => {\n    updateTimer().catch(console.error);\n  }, 1000);\n}\n\n// Start everything when page loads\ndocument.addEventListener(\"DOMContentLoaded\", initialize); "],"names":["timerEl","document","getElementById","endBtn","blockedList","async","updateTimer","response","chrome","runtime","sendMessage","type","seconds","textContent","style","color","mins","Math","floor","secs","toString","padStart","error","console","handleEndSession","saveWorkspace","confirm","workspaceName","prompt","Date","toLocaleDateString","payload","disabled","alert","addEventListener","blockedCategories","storage","local","get","length","innerHTML","forEach","category","div","createElement","className","appendChild","loadBlockedCategories","catch","setInterval"],"sourceRoot":""}