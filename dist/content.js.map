{"version":3,"file":"content.js","mappings":"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","sources":["webpack://context-focus/./src/api/storageApi.ts","webpack://context-focus/./src/lib/contextEngine/index.ts","webpack://context-focus/./src/lib/contextEngine/urlAnalyzer.ts","webpack://context-focus/./src/lib/contextEngine/contextHistory.ts","webpack://context-focus/./src/lib/contextEngine/embeddingClassifier.ts","webpack://context-focus/webpack/bootstrap","webpack://context-focus/./src/content/index.ts"],"sourcesContent":["import { FocusSettings, StorageData as TypesStorageData, FocusState } from \"../types/index\";\n\n// Re-export the StorageData interface from types/index.d.ts\nexport type StorageData = TypesStorageData;\n\n/**\n * Get an object containing the requested keys.\n */\nexport function getStorage<T extends keyof StorageData>(\n  keys: T[]\n): Promise<Pick<StorageData, T>> {\n  return new Promise((resolve, reject) => {\n    chrome.storage.local.get(keys, (result) => {\n      if (chrome.runtime.lastError) {\n        return reject(chrome.runtime.lastError);\n      }\n      resolve(result as Pick<StorageData, T>);\n    });\n  });\n}\n\n/**\n * Set or update the given keys in storage.\n */\nexport function setStorage(data: Partial<StorageData>): Promise<void> {\n  return new Promise((resolve, reject) => {\n    chrome.storage.local.set(data, () => {\n      if (chrome.runtime.lastError) {\n        return reject(chrome.runtime.lastError);\n      }\n      resolve();\n    });\n  });\n}\n\n/**\n * Add a context entry to history\n */\nexport async function addContextToHistory(\n  context: string,\n  url: string,\n  confidence: number\n): Promise<void> {\n  const { contextHistory } = await getStorage([\"contextHistory\"]);\n  const newHistory = contextHistory || [];\n  \n  // Add new entry\n  newHistory.push({\n    context,\n    url,\n    timestamp: Date.now(),\n    confidence\n  });\n  \n  // Limit history size\n  if (newHistory.length > 100) {\n    newHistory.shift();\n  }\n  \n  await setStorage({ contextHistory: newHistory });\n}\n\n/**\n * Get the current focus state\n */\nexport async function getFocusState(): Promise<FocusState> {\n  const { focusState } = await getStorage([\"focusState\"]);\n  \n  // Default state if none exists\n  const defaultState: FocusState = {\n    active: false,\n    allowedContexts: []\n  };\n  \n  return { ...defaultState, ...focusState };\n}\n\n/**\n * Update the focus state\n */\nexport async function setFocusState(partialState: Partial<FocusState>): Promise<void> {\n  const currentState = await getFocusState();\n  await setStorage({ \n    focusState: { ...currentState, ...partialState }\n  });\n}","import { PageData, ContextResult } from \"../../types/index\";\nimport { analyzeText } from \"./textAnalyzer\";\nimport { analyzeUrl, getDomainCategory, extractDomain } from \"./urlAnalyzer\";\nimport { TextClassifier } from \"./embeddingClassifier\";\nimport { ContextTracker } from \"./contextHistory\";\n\n// Singleton instances\nconst textClassifier = new TextClassifier();\nconst contextTracker = new ContextTracker();\n\n// Initialize the engine\nlet initialized = false;\n\n/**\n * Initialize the context engine\n */\nexport async function initializeContextEngine(): Promise<void> {\n  if (initialized) return;\n  \n  try {\n    // Initialize text classifier\n    await textClassifier.initialize();\n    console.log(\"[Context] Context engine initialized successfully\");\n    initialized = true;\n  } catch (error) {\n    console.error(\"[Context] Failed to initialize context engine:\", error);\n    // Continue anyway, will use fallback methods\n  }\n}\n\n/**\n * Extract metadata from the document\n */\nexport function extractMetadata(): { description: string, keywords: string[] } {\n  let description = \"\";\n  let keywords: string[] = [];\n  \n  // Get meta description\n  const descEl = document.querySelector('meta[name=\"description\"]');\n  if (descEl) {\n    description = descEl.getAttribute('content') || \"\";\n  }\n  \n  // Get meta keywords\n  const keywordsEl = document.querySelector('meta[name=\"keywords\"]');\n  if (keywordsEl) {\n    const keywordText = keywordsEl.getAttribute('content') || \"\";\n    keywords = keywordText.split(',').map(k => k.trim());\n  }\n  \n  return { description, keywords };\n}\n\n/**\n * Extract page data for context analysis\n */\nexport function extractPageData(): PageData {\n  const metadata = extractMetadata();\n  const domain = extractDomain(window.location.href);\n  \n  return {\n    url: window.location.href,\n    title: document.title,\n    fullText: document.body.innerText || \"\",\n    metaDescription: metadata.description,\n    metaKeywords: metadata.keywords,\n    domainCategory: getDomainCategory(domain)\n  };\n}\n\n/**\n * Combine scores with weights\n */\nfunction combineScores(\n  textScores: Record<string, number>,\n  urlScores: Record<string, number>,\n  domainCategory?: string\n): Record<string, number> {\n  const combinedScores: Record<string, number> = { ...textScores };\n  \n  // Add URL scores with lower weight\n  for (const [context, score] of Object.entries(urlScores)) {\n    combinedScores[context] = (combinedScores[context] || 0) + (score * 0.3);\n  }\n  \n  // Boost domain category if available\n  if (domainCategory && combinedScores[domainCategory]) {\n    combinedScores[domainCategory] = combinedScores[domainCategory] * 1.3;\n  }\n  \n  return combinedScores;\n}\n\n/**\n * Convert scores to final result\n */\nfunction formatResult(scores: Record<string, number>): ContextResult {\n  // Sort contexts by score\n  const sortedContexts = Object.entries(scores)\n    .filter(([_, score]) => score > 0)\n    .sort((a, b) => b[1] - a[1]);\n  \n  if (sortedContexts.length === 0) {\n    return {\n      primaryContext: \"General\",\n      confidence: 1,\n      secondaryContexts: []\n    };\n  }\n  \n  // Get primary and secondary contexts\n  const [primaryContext, primaryScore] = sortedContexts[0];\n  const secondaryContexts = sortedContexts.slice(1, 4).map(([context, score]) => ({\n    context,\n    confidence: score\n  }));\n  \n  return {\n    primaryContext,\n    confidence: primaryScore,\n    secondaryContexts,\n    features: scores\n  };\n}\n\n/**\n * Classify page context\n */\nexport async function classifyPageContext(pageData: PageData): Promise<ContextResult> {\n  // Ensure engine is initialized\n  if (!initialized) {\n    await initializeContextEngine();\n  }\n  \n  // Get scores from different sources\n  const textScores = await textClassifier.classify(pageData.fullText);\n  const urlScores = analyzeUrl(pageData.url);\n  \n  // Combine scores\n  const combinedScores = combineScores(textScores, urlScores, pageData.domainCategory);\n  \n  // Format result\n  const result = formatResult(combinedScores);\n  \n  // Enable context tracking\n  await contextTracker.addContext(\n    result.primaryContext, \n    pageData.url, \n    result.confidence\n  );\n  \n  return result;\n}\n\n/**\n * Get context tracker instance\n */\nexport function getContextTracker(): ContextTracker {\n  return contextTracker;\n}","// Known domain categories\nconst DOMAIN_CATEGORIES: Record<string, string> = {\n  // Work/Productivity\n  \"docs.google.com\": \"Work\",\n  \"sheets.google.com\": \"Work\",\n  \"slides.google.com\": \"Work\",\n  \"drive.google.com\": \"Work\",\n  \"office.com\": \"Work\",\n  \"microsoft365.com\": \"Work\",\n  \"linkedin.com\": \"Work\",\n  \"slack.com\": \"Work\",\n  \"teams.microsoft.com\": \"Work\",\n  \"asana.com\": \"Work\",\n  \"trello.com\": \"Work\",\n  \"notion.so\": \"Work\",\n  \"monday.com\": \"Work\",\n  \"atlassian.com\": \"Work\",\n  \"jira.com\": \"Work\",\n  \"basecamp.com\": \"Work\",\n  \"zoom.us\": \"Work\",\n  \n  // Learning\n  \"coursera.org\": \"Learning\",\n  \"udemy.com\": \"Learning\",\n  \"edx.org\": \"Learning\",\n  \"khanacademy.org\": \"Learning\",\n  \"duolingo.com\": \"Learning\",\n  \"canvas.instructure.com\": \"Learning\",\n  \"blackboard.com\": \"Learning\",\n  \"quizlet.com\": \"Learning\",\n  \"chegg.com\": \"Learning\",\n  \"brilliant.org\": \"Learning\",\n  \"codecademy.com\": \"Learning\",\n  \"freecodecamp.org\": \"Learning\",\n  \"lynda.com\": \"Learning\",\n  \"skillshare.com\": \"Learning\",\n  \"pluralsight.com\": \"Learning\",\n  \n  // Entertainment\n  \"netflix.com\": \"Entertainment\",\n  \"hulu.com\": \"Entertainment\",\n  \"disneyplus.com\": \"Entertainment\",\n  \"hbomax.com\": \"Entertainment\",\n  \"youtube.com\": \"Entertainment\",\n  \"twitch.tv\": \"Entertainment\",\n  \"spotify.com\": \"Entertainment\",\n  \"pandora.com\": \"Entertainment\",\n  \"tidal.com\": \"Entertainment\",\n  \"soundcloud.com\": \"Entertainment\",\n  \"steam.com\": \"Entertainment\",\n  \"epicgames.com\": \"Entertainment\",\n  \"ign.com\": \"Entertainment\",\n  \"imdb.com\": \"Entertainment\",\n  \"rottentomatoes.com\": \"Entertainment\",\n  \n  // News\n  \"cnn.com\": \"News\",\n  \"bbc.com\": \"News\",\n  \"nytimes.com\": \"News\",\n  \"washingtonpost.com\": \"News\",\n  \"reuters.com\": \"News\",\n  \"apnews.com\": \"News\",\n  \"foxnews.com\": \"News\",\n  \"nbcnews.com\": \"News\",\n  \"abcnews.go.com\": \"News\",\n  \"cbsnews.com\": \"News\",\n  \"politico.com\": \"News\",\n  \"economist.com\": \"News\",\n  \"wsj.com\": \"News\",\n  \"bloomberg.com\": \"News\",\n  \"theguardian.com\": \"News\",\n  \n  // Development\n  \"github.com\": \"Development\",\n  \"gitlab.com\": \"Development\",\n  \"bitbucket.org\": \"Development\",\n  \"stackoverflow.com\": \"Development\",\n  \"developer.mozilla.org\": \"Development\",\n  \"w3schools.com\": \"Development\",\n  \"codepen.io\": \"Development\",\n  \"replit.com\": \"Development\",\n  \"codesandbox.io\": \"Development\",\n  \"jsfiddle.net\": \"Development\",\n  \"npmjs.com\": \"Development\",\n  \"pypi.org\": \"Development\",\n  \"docker.com\": \"Development\",\n  \"kubernetes.io\": \"Development\",\n  \"digitalocean.com\": \"Development\",\n  \n  // Shopping\n  \"amazon.com\": \"Shopping\",\n  \"ebay.com\": \"Shopping\",\n  \"walmart.com\": \"Shopping\",\n  \"target.com\": \"Shopping\",\n  \"bestbuy.com\": \"Shopping\",\n  \"etsy.com\": \"Shopping\",\n  \"aliexpress.com\": \"Shopping\",\n  \"wayfair.com\": \"Shopping\",\n  \"costco.com\": \"Shopping\",\n  \"newegg.com\": \"Shopping\",\n  \"homedepot.com\": \"Shopping\",\n  \"lowes.com\": \"Shopping\",\n  \"macys.com\": \"Shopping\",\n  \"nordstrom.com\": \"Shopping\",\n  \"zappos.com\": \"Shopping\",\n  \n  // Social\n  \"facebook.com\": \"Social\",\n  \"twitter.com\": \"Social\",\n  \"instagram.com\": \"Social\",\n  \"reddit.com\": \"Social\",\n  \"pinterest.com\": \"Social\",\n  \"tumblr.com\": \"Social\",\n  \"tiktok.com\": \"Social\",\n  \"snapchat.com\": \"Social\",\n  \"discord.com\": \"Social\",\n  \"messenger.com\": \"Social\",\n  \"telegram.org\": \"Social\",\n  \"whatsapp.com\": \"Social\",\n  \"signal.org\": \"Social\",\n  \"medium.com\": \"Social\",\n  \"quora.com\": \"Social\",\n  \n  // Research\n  \"scholar.google.com\": \"Research\",\n  \"pubmed.ncbi.nlm.nih.gov\": \"Research\",\n  \"researchgate.net\": \"Research\",\n  \"academia.edu\": \"Research\",\n  \"jstor.org\": \"Research\",\n  \"springer.com\": \"Research\",\n  \"sciencedirect.com\": \"Research\",\n  \"ieee.org\": \"Research\",\n  \"ncbi.nlm.nih.gov\": \"Research\",\n  \"arxiv.org\": \"Research\",\n  \"sciencemag.org\": \"Research\",\n  \"nature.com\": \"Research\",\n  \"webofknowledge.com\": \"Research\",\n  \"scopus.com\": \"Research\",\n  \"mendeley.com\": \"Research\"\n};\n\n/**\n * Extract domain from URL\n */\nexport function extractDomain(url: string): string {\n  try {\n    const urlObj = new URL(url);\n    return urlObj.hostname;\n  } catch (error) {\n    console.error(\"Error extracting domain:\", error);\n    return \"\";\n  }\n}\n\n/**\n * Get domain category from predefined list\n */\nexport function getDomainCategory(domain: string): string | undefined {\n  // Try exact match\n  if (DOMAIN_CATEGORIES[domain]) {\n    return DOMAIN_CATEGORIES[domain];\n  }\n  \n  // Try with 'www.' prefix removed\n  if (domain.startsWith('www.')) {\n    const withoutWww = domain.substring(4);\n    if (DOMAIN_CATEGORIES[withoutWww]) {\n      return DOMAIN_CATEGORIES[withoutWww];\n    }\n  }\n  \n  // Try parent domain\n  const parts = domain.split('.');\n  if (parts.length > 2) {\n    const parentDomain = parts.slice(parts.length - 2).join('.');\n    return DOMAIN_CATEGORIES[parentDomain];\n  }\n  \n  return undefined;\n}\n\n/**\n * Extract path keywords from URL\n */\nexport function extractPathKeywords(url: string): string[] {\n  try {\n    const urlObj = new URL(url);\n    return urlObj.pathname\n      .split('/')\n      .filter(Boolean)\n      .flatMap(segment => \n        segment\n          .split(/[-_]/)\n          .filter(word => word.length > 2)\n      );\n  } catch (error) {\n    console.error(\"Error extracting path keywords:\", error);\n    return [];\n  }\n}\n\n/**\n * Analyze URL for context clues\n */\nexport function analyzeUrl(url: string): Record<string, number> {\n  const domain = extractDomain(url);\n  const domainCategory = getDomainCategory(domain);\n  const pathKeywords = extractPathKeywords(url);\n  \n  const scores: Record<string, number> = {};\n  \n  // Set base score from domain\n  if (domainCategory) {\n    scores[domainCategory] = 0.8;\n  }\n  \n  // Add scores from path keywords (could be enhanced with TF-IDF against keywords)\n  // This is a simplified implementation\n  \n  return scores;\n}","import { addContextToHistory, getStorage } from \"../../api/storageApi\";\nimport { ContextSwitch } from \"../../types/index\";\n\n/**\n * Class to track context history and detect focus issues\n */\nexport class ContextTracker {\n  private latestContext: string = \"Unknown\";\n  private latestUrl: string = \"\";\n  \n  /**\n   * Add context to history\n   */\n  async addContext(context: string, url: string, confidence: number): Promise<void> {\n    this.latestContext = context;\n    this.latestUrl = url;\n    \n    // Store in persistent storage\n    await addContextToHistory(context, url, confidence);\n  }\n  \n  /**\n   * Get context switches in a time window\n   */\n  async getContextSwitches(timeWindowMinutes: number = 15): Promise<ContextSwitch[]> {\n    const { contextHistory } = await getStorage([\"contextHistory\"]);\n    if (!contextHistory || contextHistory.length < 2) {\n      return [];\n    }\n    \n    const switches: ContextSwitch[] = [];\n    const now = Date.now();\n    const timeWindow = timeWindowMinutes * 60 * 1000;\n    \n    // Filter history to time window\n    const relevantHistory = contextHistory.filter(\n      entry => (now - entry.timestamp) < timeWindow\n    );\n    \n    // Find context switches\n    for (let i = 1; i < relevantHistory.length; i++) {\n      if (relevantHistory[i].context !== relevantHistory[i-1].context) {\n        switches.push({\n          from: relevantHistory[i-1].context,\n          to: relevantHistory[i].context,\n          timestamp: relevantHistory[i].timestamp,\n          fromUrl: relevantHistory[i-1].url,\n          toUrl: relevantHistory[i].url\n        });\n      }\n    }\n    \n    return switches;\n  }\n  \n  /**\n   * Get current context streak (consecutive entries with same context)\n   */\n  async getCurrentContextStreak(): Promise<number> {\n    const { contextHistory } = await getStorage([\"contextHistory\"]);\n    if (!contextHistory || contextHistory.length === 0) {\n      return 0;\n    }\n    \n    const currentContext = contextHistory[contextHistory.length - 1].context;\n    let streak = 1;\n    \n    // Count backwards from most recent\n    for (let i = contextHistory.length - 2; i >= 0; i--) {\n      if (contextHistory[i].context === currentContext) {\n        streak++;\n      } else {\n        break;\n      }\n    }\n    \n    return streak;\n  }\n  \n  /**\n   * Check if focus is lost based on context switches\n   */\n  async isLostFocus(switchThreshold: number = 5, timeWindowMinutes: number = 15): Promise<boolean> {\n    const switches = await this.getContextSwitches(timeWindowMinutes);\n    \n    // Check number of switches\n    if (switches.length >= switchThreshold) {\n      // Check if switching between different contexts\n      const contexts = new Set(switches.map(s => s.to));\n      if (contexts.size >= 3) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n  \n  /**\n   * Get latest context\n   */\n  getLatestContext(): string {\n    return this.latestContext;\n  }\n  \n  /**\n   * Get latest URL\n   */\n  getLatestUrl(): string {\n    return this.latestUrl;\n  }\n}","// This is a simplified version that can work without TensorFlow.js\n// In production, you'd use the Universal Sentence Encoder model\n\n/**\n * Simple context classifier that doesn't rely on TensorFlow\n * This is a fallback for when TensorFlow.js can't be used\n */\nexport class TextClassifier {\n  private initialized: boolean = false;\n  private categoryKeywords: Record<string, string[]> = {\n    \"Work\": [\n      \"project deadline meeting task client report presentation office business email colleague manager workflow productivity professional\",\n    ],\n    \"Learning\": [\n      \"course lesson tutorial learn study education assignment homework university college school academy lecture professor student quiz exam test knowledge textbook\",\n    ],\n    \"Entertainment\": [\n      \"movie show stream watch video game play fun music song entertainment netflix youtube hulu disney hbo amazon twitch gaming\",\n    ],\n    \"News\": [\n      \"news article report breaking headline journalist media press update current politics election government president minister cnn bbc nyt reuters associated\",\n    ],\n    \"Shopping\": [\n      \"shop buy purchase order cart checkout price discount product item amazon ebay etsy store mall shipping delivery payment credit review\",\n    ],\n    \"Social\": [\n      \"friend message chat post share social network facebook twitter instagram snapchat tiktok linkedin reddit forum comment like follow connect profile\",\n    ],\n    \"Research\": [\n      \"research study analysis data information journal article paper science scientific academic scholar experiment theory hypothesis methodology finding conclude reference citation\",\n    ],\n    \"Development\": [\n      \"code programming developer software github git repository commit function class method variable object array string stack overflow javascript python typescript\",\n    ]\n  };\n  \n  /**\n   * Initialize the classifier\n   */\n  async initialize(): Promise<void> {\n    this.initialized = true;\n  }\n  \n  /**\n   * Classify text into context categories\n   */\n  async classify(text: string): Promise<Record<string, number>> {\n    if (!this.initialized) {\n      await this.initialize();\n    }\n    \n    const textLower = text.toLowerCase();\n    const scores: Record<string, number> = {};\n    \n    // Simple scoring based on keyword presence\n    for (const [category, keywordLists] of Object.entries(this.categoryKeywords)) {\n      let categoryScore = 0;\n      \n      for (const keywordList of keywordLists) {\n        const keywords = keywordList.split(\" \");\n        let keywordsFound = 0;\n        \n        for (const keyword of keywords) {\n          if (textLower.includes(keyword)) {\n            keywordsFound++;\n            categoryScore += 1;\n          }\n        }\n        \n        // Normalize score\n        if (keywordsFound > 0) {\n          categoryScore = categoryScore / (keywords.length * 0.3);\n        }\n      }\n      \n      scores[category] = Math.min(1, categoryScore);\n    }\n    \n    return scores;\n  }\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * Content script for Context Focus\n * \n * This script runs on each page and does only one thing:\n * 1. Classify the current page context\n * 2. Send the classification to the background script\n */\n\nimport { classifyPageContext } from \"../lib/contextEngine\";\n\n// Keep track of last context (to avoid sending duplicate messages)\nlet lastContext: string | null = null;\n\n// Initialize context detection\nasync function initContextDetection(): Promise<void> {\n  // Register for future DOM changes\n  setupMutationObserver();\n  \n  // Initial classification\n  await detectAndSendContext();\n}\n\n/**\n * Set up a mutation observer to detect and send context when content changes\n */\nfunction setupMutationObserver(): void {\n  // Observe changes to the page content\n  const observer = new MutationObserver(() => {\n    // Skip if document is hidden (tab not visible)\n    if (document.hidden) return;\n    \n    // Use requestIdleCallback for better performance\n    if (!contextDetectionTimer) {\n      if ('requestIdleCallback' in window) {\n        window.requestIdleCallback(() => scheduleContextCheck(), { timeout: 2000 });\n      } else {\n        scheduleContextCheck();\n      }\n    }\n  });\n  \n  // Start observing\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true,\n    characterData: true\n  });\n}\n\n// Timer for debouncing context detection\nlet contextDetectionTimer: number | null = null;\n\n/**\n * Schedule a context check after a short delay (debouncing)\n */\nfunction scheduleContextCheck(): void {\n  // Clear any existing timer\n  if (contextDetectionTimer) {\n    window.clearTimeout(contextDetectionTimer);\n    contextDetectionTimer = null;\n  }\n\n  // Set a new timer\n  contextDetectionTimer = window.setTimeout(async () => {\n    await detectAndSendContext();\n  }, 1000);\n}\n\n/**\n * Extract useful data from the current page\n */\nfunction extractPageData() {\n  // Get basic page info\n  const url = window.location.href;\n  const title = document.title;\n  \n  // Extract metadata\n  const metaDescription = document.querySelector('meta[name=\"description\"]')?.getAttribute('content') || '';\n  const metaKeywords = document.querySelector('meta[name=\"keywords\"]')?.getAttribute('content')?.split(',').map(k => k.trim()) || [];\n  \n  // Extract visible text\n  const textElements = document.querySelectorAll('p, h1, h2, h3, h4, h5, h6, a, span, div, li');\n  let visibleText = '';\n  \n  // Get text from the first 100 elements (for performance)\n  const maxElements = Math.min(textElements.length, 100);\n  for (let i = 0; i < maxElements; i++) {\n    const el = textElements[i];\n    const style = window.getComputedStyle(el);\n    if (style.display !== 'none' && style.visibility !== 'hidden') {\n      visibleText += el.textContent + ' ';\n      if (visibleText.length > 5000) break; // Limit text length\n    }\n  }\n  \n  return {\n    url,\n    title,\n    fullText: visibleText.trim(),\n    metaDescription,\n    metaKeywords\n  };\n}\n\n/**\n * Detect the context of the current page and send it to the background script\n */\nasync function detectAndSendContext(): Promise<void> {\n  try {\n    // Extract page data\n    const pageData = extractPageData();\n    \n    // Classify context\n    const contextResult = await classifyPageContext(pageData);\n    \n    // Only send if context has changed\n    if (contextResult.primaryContext !== lastContext) {\n      lastContext = contextResult.primaryContext;\n      \n      // Simple message with just the context and confidence\n      chrome.runtime.sendMessage({\n        type: \"CONTEXT_DETECTED\",\n        context: contextResult.primaryContext,\n        confidence: contextResult.confidence,\n        url: pageData.url\n      });\n    }\n  } catch (error) {\n    console.error(\"Error detecting context:\", error);\n  }\n}\n\n// Start context detection when the page is loaded\n(function() {\n  if (document.readyState === 'complete' || document.readyState === 'interactive') {\n    initContextDetection();\n  } else {\n    document.addEventListener('DOMContentLoaded', initContextDetection);\n  }\n})();\n\n// Add listener for DRIFT_WARNING messages from background script\nchrome.runtime.onMessage.addListener((msg) => {\n  if (msg.type !== \"DRIFT_WARNING\") return;\n\n  // remove any previous overlay\n  const old = document.getElementById(\"__cf_drift_overlay\");\n  old?.remove();\n\n  // build a full‑screen overlay\n  const ov = document.createElement(\"div\");\n  ov.id = \"__cf_drift_overlay\";\n  ov.style.cssText = `\n    position:fixed;inset:0;z-index:2147483647;\n    background:rgba(0,0,0,.85);color:#fff;display:flex;\n    flex-direction:column;align-items:center;justify-content:center;\n    font:700 32px/1.4 system-ui, sans-serif;text-align:center;\n  `;\n  ov.textContent = msg.message || \"You're drifting!\";\n  \n  // optional \"Return\" button\n  const btn = document.createElement(\"button\");\n  btn.textContent = \"Back to focus\";\n  btn.style.cssText = `\n    margin-top:24px;padding:12px 24px;font-size:18px;font-weight:700;\n    border:none;border-radius:6px;cursor:pointer;background:#d32f2f;color:#fff;\n  `;\n  btn.onclick = () => ov.remove();\n  ov.appendChild(btn);\n\n  document.documentElement.appendChild(ov);\n\n  // let background know we handled it (optional)\n  return true;  // keeps the sendResponse channel open\n});"],"names":["getStorage","keys","Promise","resolve","reject","chrome","storage","local","get","result","runtime","lastError","setStorage","data","set","async","getFocusState","focusState","active","allowedContexts","context","url","confidence","contextHistory","newHistory","push","timestamp","Date","now","length","shift","partialState","currentState","textClassifier","TextClassifier","contextTracker","ContextTracker","initialized","initializeContextEngine","initialize","console","log","error","extractMetadata","description","keywords","descEl","document","querySelector","getAttribute","keywordsEl","split","map","k","trim","metadata","domain","extractDomain","window","location","href","title","fullText","body","innerText","metaDescription","metaKeywords","domainCategory","getDomainCategory","pageData","scores","sortedContexts","Object","entries","filter","_","score","sort","a","b","primaryContext","secondaryContexts","primaryScore","slice","features","formatResult","textScores","urlScores","combinedScores","combineScores","classify","analyzeUrl","addContext","DOMAIN_CATEGORIES","URL","hostname","startsWith","withoutWww","substring","parts","parentDomain","join","extractPathKeywords","pathname","Boolean","flatMap","segment","word","latestContext","latestUrl","this","addContextToHistory","getContextSwitches","timeWindowMinutes","switches","timeWindow","relevantHistory","entry","i","from","to","fromUrl","toUrl","getCurrentContextStreak","currentContext","streak","isLostFocus","switchThreshold","Set","s","size","getLatestContext","getLatestUrl","categoryKeywords","text","textLower","toLowerCase","category","keywordLists","categoryScore","keywordList","keywordsFound","keyword","includes","Math","min","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","lastContext","initContextDetection","MutationObserver","hidden","contextDetectionTimer","requestIdleCallback","scheduleContextCheck","timeout","observe","childList","subtree","characterData","detectAndSendContext","clearTimeout","setTimeout","textElements","querySelectorAll","visibleText","maxElements","el","style","getComputedStyle","display","visibility","textContent","extractPageData","contextResult","classifyPageContext","sendMessage","type","readyState","addEventListener","onMessage","addListener","msg","old","getElementById","remove","ov","createElement","id","cssText","message","btn","onclick","appendChild","documentElement"],"sourceRoot":""}