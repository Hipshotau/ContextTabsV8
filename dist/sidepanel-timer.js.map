{"version":3,"file":"sidepanel-timer.js","mappings":"MACA,MAAMA,EAAuBC,SAASC,eAAe,kBAC/CC,EAAqBF,SAASC,eAAe,gBAC7CE,EAAiBH,SAASC,eAAe,aACzCG,EAAiBJ,SAASC,eAAe,mBAG/C,IAAII,EACAC,EAAU,EACVC,EAAc,GACdC,EAAY,GAGhB,SAASC,IAEPC,OAAOC,QAAQC,MAAMC,IAAI,CAAC,sBAAuBC,IAC/C,GAAIA,EAAOC,mBAAqBD,EAAOC,kBAAkBC,OAAQ,CAC/D,MAAQV,QAASW,EAAeV,YAAaW,EAAMV,UAAWW,GAAOL,EAAOC,kBAG5ET,EAAUW,EACVV,EAAcW,EACdV,EAAYW,EAGZjB,EAAmBkB,YAAc,kBAAkBb,UAAoBC,KAgBvEH,GACFgB,cAAchB,GAIhBiB,IAGAjB,EAAgBkB,aAAY,KAC1BD,GAAoB,GACnB,IAtBD,MAEEvB,EAAqBqB,YAAc,kBACnClB,EAAmBkB,YAAc,MACjChB,EAAeoB,MAAMC,QAAU,MACjC,GAEJ,CAmBA,SAASH,IACP,MAAMI,EAAMC,KAAKD,MACXE,EAAWC,KAAKC,IAAI,EAAGxB,EAAUoB,GAEvC,GAAIE,GAAY,EAYd,OAVA7B,EAAqBqB,YAAc,UACnCC,cAAchB,GAGdD,EAAegB,YAAc,+CAC7BhB,EAAeoB,MAAMC,QAAU,QAC/BrB,EAAe2B,UAAUC,IAAI,gBAG7BtB,OAAOuB,QAAQC,YAAY,CAAEC,KAAM,kBAKrC,MAAMC,EAAUP,KAAKQ,MAAMT,EAAW,KAChCU,EAAUT,KAAKQ,MAAOT,EAAW,IAAS,KAChD7B,EAAqBqB,YAAc,GAAGgB,KAAWE,EAAQC,WAAWC,SAAS,EAAG,OAG5EZ,EAAW,KACb7B,EAAqByB,MAAMiB,MAAQ,UACnC1C,EAAqBgC,UAAUC,IAAI,WAGnC5B,EAAeoB,MAAMC,QAAU,UAE/B1B,EAAqByB,MAAMiB,MAAQ,GACnC1C,EAAqBgC,UAAUW,OAAO,WACtCtC,EAAeoB,MAAMC,QAAU,OAEnC,CAGAtB,EAAewC,iBAAiB,SAAS,KACvCjC,OAAOuB,QAAQC,YAAY,CAAEC,KAAM,oBACnCpC,EAAqBqB,YAAc,cACnCC,cAAchB,GACdD,EAAeoB,MAAMC,QAAU,OAG/BvB,EAAmBkB,YAAc,iCAAiC,IAIpEV,OAAOuB,QAAQW,UAAUC,aAAaC,IACf,kBAAjBA,EAAQX,KACV1B,IAC0B,gBAAjBqC,EAAQX,OACjBpC,EAAqBqB,YAAc,cACnClB,EAAmBkB,YAAc,MACjChB,EAAeoB,MAAMC,QAAU,OAC/BJ,cAAchB,GAChB,IAIFL,SAAS2C,iBAAiB,mBAAoBlC,GAG9Cc,YAAYd,EAAiB,I","sources":["webpack://context-focus/./src/sidepanel/sidepanel-timer.js"],"sourcesContent":["// Get DOM elements\nconst timeRemainingElement = document.getElementById('time-remaining');\nconst contextNameElement = document.getElementById('context-name');\nconst endTimerButton = document.getElementById('end-timer');\nconst warningMessage = document.getElementById('warning-message');\n\n// Timer variables\nlet timerInterval;\nlet endTime = 0;\nlet fromContext = '';\nlet toContext = '';\n\n// Initialize the timer\nfunction initializeTimer() {\n  // Get timer data from storage\n  chrome.storage.local.get(['activeGlobalTimer'], (result) => {\n    if (result.activeGlobalTimer && result.activeGlobalTimer.active) {\n      const { endTime: storedEndTime, fromContext: from, toContext: to } = result.activeGlobalTimer;\n      \n      // Set timer data\n      endTime = storedEndTime;\n      fromContext = from;\n      toContext = to;\n      \n      // Update UI\n      contextNameElement.textContent = `Switched from \"${fromContext}\" to \"${toContext}\"`;\n      \n      // Start timer\n      startTimerDisplay();\n    } else {\n      // No active timer\n      timeRemainingElement.textContent = 'No active timer';\n      contextNameElement.textContent = 'N/A';\n      warningMessage.style.display = 'none';\n    }\n  });\n}\n\n// Start timer display\nfunction startTimerDisplay() {\n  // Clear any existing interval\n  if (timerInterval) {\n    clearInterval(timerInterval);\n  }\n  \n  // Update immediately\n  updateTimerDisplay();\n  \n  // Update every second\n  timerInterval = setInterval(() => {\n    updateTimerDisplay();\n  }, 1000);\n}\n\n// Update timer display\nfunction updateTimerDisplay() {\n  const now = Date.now();\n  const timeLeft = Math.max(0, endTime - now);\n  \n  if (timeLeft <= 0) {\n    // Timer expired\n    timeRemainingElement.textContent = 'Expired';\n    clearInterval(timerInterval);\n    \n    // Show warning\n    warningMessage.textContent = 'Timer has expired. Return to your focus now!';\n    warningMessage.style.display = 'block';\n    warningMessage.classList.add('pulsing');\n    \n    // Notify background\n    chrome.runtime.sendMessage({ type: 'TIMER_EXPIRED' });\n    return;\n  }\n  \n  // Format time remaining\n  const minutes = Math.floor(timeLeft / 60000);\n  const seconds = Math.floor((timeLeft % 60000) / 1000);\n  timeRemainingElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  \n  // Add visual indication when time is running low\n  if (timeLeft < 60000) {\n    timeRemainingElement.style.color = '#f44336';\n    timeRemainingElement.classList.add('pulsing');\n    \n    // Show warning message\n    warningMessage.style.display = 'block';\n  } else {\n    timeRemainingElement.style.color = '';\n    timeRemainingElement.classList.remove('pulsing');\n    warningMessage.style.display = 'none';\n  }\n}\n\n// End timer handler\nendTimerButton.addEventListener('click', () => {\n  chrome.runtime.sendMessage({ type: 'END_FOCUS_TIMER' });\n  timeRemainingElement.textContent = 'Timer ended';\n  clearInterval(timerInterval);\n  warningMessage.style.display = 'none';\n  \n  // Update UI to show timer ended\n  contextNameElement.textContent = 'Timer ended - returned to focus';\n});\n\n// Listen for timer updates from background script\nchrome.runtime.onMessage.addListener((message) => {\n  if (message.type === 'TIMER_UPDATED') {\n    initializeTimer();\n  } else if (message.type === 'TIMER_ENDED') {\n    timeRemainingElement.textContent = 'Timer ended';\n    contextNameElement.textContent = 'N/A';\n    warningMessage.style.display = 'none';\n    clearInterval(timerInterval);\n  }\n});\n\n// Initialize on load\ndocument.addEventListener('DOMContentLoaded', initializeTimer);\n\n// Poll for timer updates (backup mechanism)\nsetInterval(initializeTimer, 5000); "],"names":["timeRemainingElement","document","getElementById","contextNameElement","endTimerButton","warningMessage","timerInterval","endTime","fromContext","toContext","initializeTimer","chrome","storage","local","get","result","activeGlobalTimer","active","storedEndTime","from","to","textContent","clearInterval","updateTimerDisplay","setInterval","style","display","now","Date","timeLeft","Math","max","classList","add","runtime","sendMessage","type","minutes","floor","seconds","toString","padStart","color","remove","addEventListener","onMessage","addListener","message"],"sourceRoot":""}